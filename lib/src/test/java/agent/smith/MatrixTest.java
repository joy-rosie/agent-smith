/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package agent.smith;

import org.junit.Test;

import static org.junit.Assert.*;

public class MatrixTest {

    @Test
    public void testMatrixFactoryCreateNegativeNumRows() {
        double[] array = new double[]{};
        int numRows = -1;
        int numCols = 0;
        String expected = "'numRows' (-1) has to be a non negative integer";

        Exception thrown = assertThrows(IllegalArgumentException.class, () -> Matrix.create(array, numRows, numCols));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryCreateNegativeNumCols() {
        double[] array = new double[]{};
        int numRows = 0;
        int numCols = -1;
        String expected = "'numCols' (-1) has to be a non negative integer";

        Exception thrown = assertThrows(IllegalArgumentException.class, () -> Matrix.create(array, numRows, numCols));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryCreateExceptionNull() {
        double[] array = null;
        int numRows = 0;
        int numCols = 0;
        String expected = "'array' cannot be null";

        Exception thrown = assertThrows(NullPointerException.class, () -> Matrix.create(array, numRows, numCols));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryCreateExceptionLengthTooLow() {
        double[] array = new double[]{};
        int numRows = 1;
        int numCols = 1;
        String expected = "Length of 'array' (0) does not match 'numRows' * 'numCols' (1)";

        Exception thrown = assertThrows(
                IllegalArgumentException.class, () -> Matrix.create(array, numRows, numCols));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryCreateExceptionLengthTooHigh() {
        double[] array = new double[]{1, 2, 3, 4};
        int numRows = 1;
        int numCols = 1;
        String expected = "Length of 'array' (4) does not match 'numRows' * 'numCols' (1)";

        Exception thrown = assertThrows(
                IllegalArgumentException.class, () -> Matrix.create(array, numRows, numCols));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryCreateEmpty() {
        double[] array = new double[]{};
        int numRows = 0;
        int numCols = 0;
        double[] expectedArray = new double[]{};
        int expectedNumRows = 0;
        int expectedNumCols = 0;

        Matrix matrix = Matrix.create(array, numRows, numCols);

        assertArrayEquals(expectedArray, matrix.getArray(), 0.0);
        assertEquals(expectedNumRows, matrix.getNumRows());
        assertEquals(expectedNumCols, matrix.getNumCols());
    }

    @Test
    public void testMatrixFactoryCreateSimple1() {
        double[] array = new double[]{1, 2, 3, 4};
        int numRows = 2;
        int numCols = 2;
        double[] expectedArray = new double[]{1, 2, 3, 4};
        int expectedNumRows = 2;
        int expectedNumCols = 2;

        Matrix matrix = Matrix.create(array, numRows, numCols);

        assertArrayEquals(expectedArray, matrix.getArray(), 0.0);
        assertEquals(expectedNumRows, matrix.getNumRows());
        assertEquals(expectedNumCols, matrix.getNumCols());
    }

    @Test
    public void testMatrixFactoryCreateSimple2() {
        double[] array = new double[]{1, 2, 3, 4, 5, 6};
        int numRows = 2;
        int numCols = 3;
        double[] expectedArray = new double[]{1, 2, 3, 4, 5, 6};
        int expectedNumRows = 2;
        int expectedNumCols = 3;

        Matrix matrix = Matrix.create(array, numRows, numCols);

        assertArrayEquals(expectedArray, matrix.getArray(), 0.0);
        assertEquals(expectedNumRows, matrix.getNumRows());
        assertEquals(expectedNumCols, matrix.getNumCols());
    }

    @Test
    public void testMatrixFactoryCreateSimple3() {
        double[] array = new double[]{1, 2, 3, 4, 5, 6};
        int numRows = 3;
        int numCols = 2;
        double[] expectedArray = new double[]{1, 2, 3, 4, 5, 6};
        int expectedNumRows = 3;
        int expectedNumCols = 2;

        Matrix matrix = Matrix.create(array, numRows, numCols);

        assertArrayEquals(expectedArray, matrix.getArray(), 0.0);
        assertEquals(expectedNumRows, matrix.getNumRows());
        assertEquals(expectedNumCols, matrix.getNumCols());
    }

    @Test
    public void testMatrixValidateRowIndexExceptionEmptyMatrix() {
        Matrix matrix = Matrix.create(new double[]{}, 0, 0);
        int i = 0;
        String expected = "Row index 'i' = (0) cannot be used as matrix is empty";

        Exception thrown = assertThrows(IllegalStateException.class, () -> matrix.validateRowIndex(i));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixValidateRowIndexExceptionTooBig() {
        Matrix matrix = Matrix.create(new double[]{0}, 1, 1);
        int i = 1;
        String expected = "Row index 'i' = (1) has to be between 0 and 0";

        Exception thrown = assertThrows(IllegalArgumentException.class, () -> matrix.validateRowIndex(i));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixValidateRowIndexExceptionNegative() {
        Matrix matrix = Matrix.create(new double[]{0}, 1, 1);
        int i = -1;
        String expected = "Row index 'i' = (-1) has to be between 0 and 0";

        Exception thrown = assertThrows(IllegalArgumentException.class, () -> matrix.validateRowIndex(i));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixValidateRow() {
        Matrix matrix = Matrix.create(new double[]{0}, 1, 1);
        int i = 0;

        matrix.validateRowIndex(i);
    }

    @Test
    public void testMatrixValidateColIndexExceptionEmptyMatrix() {
        Matrix matrix = Matrix.create(new double[]{}, 0, 0);
        int j = 0;
        String expected = "Col index 'j' = (0) cannot be used as matrix is empty";

        Exception thrown = assertThrows(IllegalStateException.class, () -> matrix.validateColIndex(j));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixValidateColIndexExceptionTooBig() {
        Matrix matrix = Matrix.create(new double[]{0}, 1, 1);
        int j = 1;
        String expected = "Col index 'j' = (1) has to be between 0 and 0";

        Exception thrown = assertThrows(IllegalArgumentException.class, () -> matrix.validateColIndex(j));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixValidateColIndexExceptionNegative() {
        Matrix matrix = Matrix.create(new double[]{0}, 1, 1);
        int j = -1;
        String expected = "Col index 'j' = (-1) has to be between 0 and 0";

        Exception thrown = assertThrows(IllegalArgumentException.class, () -> matrix.validateColIndex(j));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixValidateCol() {
        Matrix matrix = Matrix.create(new double[]{0}, 1, 1);
        int j = 0;

        matrix.validateColIndex(j);
    }

    @Test
    public void testMatrixGetIndex1() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);
        int i = 0;
        int j = 0;
        int expected = 0;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetIndex2() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);
        int i = 0;
        int j = 1;
        int expected = 1;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetIndex3() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);
        int i = 0;
        int j = 2;
        int expected = 2;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetIndex4() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);
        int i = 1;
        int j = 0;
        int expected = 3;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetIndex5() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);
        int i = 1;
        int j = 1;
        int expected = 4;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetIndex6() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);
        int i = 1;
        int j = 2;
        int expected = 5;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetIndex7() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);
        int i = 0;
        int j = 0;
        int expected = 0;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetIndex8() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);
        int i = 0;
        int j = 1;
        int expected = 1;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetIndex9() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);
        int i = 1;
        int j = 0;
        int expected = 2;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetIndex10() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);
        int i = 1;
        int j = 1;
        int expected = 3;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetIndex11() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);
        int i = 2;
        int j = 0;
        int expected = 4;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetIndex12() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);
        int i = 2;
        int j = 1;
        int expected = 5;

        int index = matrix.getIndex(i, j);
        assertEquals(expected, index);
    }

    @Test
    public void testMatrixGetRow1() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);
        int i = 0;
        double[] expected = new double[]{1, 2, 3};

        double[] row = matrix.getRow(i);

        assertArrayEquals(expected, row, 0.0);
    }

    @Test
    public void testMatrixGetRow2() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);
        int i = 1;
        double[] expected = new double[]{4, 5, 6};

        double[] row = matrix.getRow(i);

        assertArrayEquals(expected, row, 0.0);
    }

    @Test
    public void testMatrixGetRow3() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);
        int i = 0;
        double[] expected = new double[]{1, 2};

        double[] row = matrix.getRow(i);

        assertArrayEquals(expected, row, 0.0);
    }

    @Test
    public void testMatrixGetRow4() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);
        int i = 1;
        double[] expected = new double[]{3, 4};

        double[] row = matrix.getRow(i);

        assertArrayEquals(expected, row, 0.0);
    }

    @Test
    public void testMatrixGetRow5() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);
        int i = 2;
        double[] expected = new double[]{5, 6};

        double[] row = matrix.getRow(i);

        assertArrayEquals(expected, row, 0.0);
    }

    @Test
    public void testMatrixGetCol1() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);
        int j = 0;
        double[] expected = new double[]{1, 4};

        double[] col = matrix.getCol(j);

        assertArrayEquals(expected, col, 0.0);
    }

    @Test
    public void testMatrixGetCol2() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);
        int j = 1;
        double[] expected = new double[]{2, 5};

        double[] col = matrix.getCol(j);

        assertArrayEquals(expected, col, 0.0);
    }

    @Test
    public void testMatrixGetCol3() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);
        int j = 2;
        double[] expected = new double[]{3, 6};

        double[] col = matrix.getCol(j);

        assertArrayEquals(expected, col, 0.0);
    }

    @Test
    public void testMatrixGetCol4() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);
        int j = 0;
        double[] expected = new double[]{1, 3, 5};

        double[] row = matrix.getCol(j);

        assertArrayEquals(expected, row, 0.0);
    }

    @Test
    public void testMatrixGetCol5() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);
        int j = 1;
        double[] expected = new double[]{2, 4, 6};

        double[] row = matrix.getCol(j);

        assertArrayEquals(expected, row, 0.0);
    }

    @Test
    public void testMatrixEquals1() {
        Matrix matrix = Matrix.create(new double[]{}, 0, 0);
        Matrix objectToCompare = null;
        boolean expected = false;

        boolean equals = matrix.equals(objectToCompare);

        assertEquals(expected, equals);
    }

    @Test
    public void testMatrixEquals2() {
        Matrix matrix = Matrix.create(new double[]{}, 0, 0);
        Matrix objectToCompare = Matrix.create(new double[]{}, 0, 0);
        boolean expected = true;

        boolean equals = matrix.equals(objectToCompare);

        assertEquals(expected, equals);
    }

    @Test
    public void testMatrixEquals3() {
        Matrix matrix = Matrix.create(new double[]{}, 0, 0);
        Matrix objectToCompare = matrix;
        boolean expected = true;

        boolean equals = matrix.equals(objectToCompare);

        assertEquals(expected, equals);
    }

    @Test
    public void testMatrixEquals4() {
        Matrix matrix = Matrix.create(new double[]{}, 0, 0);
        Matrix objectToCompare = Matrix.create(new double[]{1}, 1, 1);
        boolean expected = false;

        boolean equals = matrix.equals(objectToCompare);

        assertEquals(expected, equals);
    }

    @Test
    public void testMatrixEquals5() {
        Matrix matrix = Matrix.create(new double[]{0}, 1, 1);
        Matrix objectToCompare = Matrix.create(new double[]{0, 1}, 1, 2);
        boolean expected = false;

        boolean equals = matrix.equals(objectToCompare);

        assertEquals(expected, equals);
    }

    @Test
    public void testMatrixEquals6() {
        Matrix matrix = Matrix.create(new double[]{0, 1}, 2, 1);
        Matrix objectToCompare = Matrix.create(new double[]{0, 1}, 1, 2);
        boolean expected = false;

        boolean equals = matrix.equals(objectToCompare);

        assertEquals(expected, equals);
    }

    @Test
    public void testMatrixEquals7() {
        Matrix matrix = Matrix.create(new double[]{0, 1}, 1, 2);
        Matrix objectToCompare = Matrix.create(new double[]{0, 1}, 1, 2);
        boolean expected = true;

        boolean equals = matrix.equals(objectToCompare);

        assertEquals(expected, equals);
    }

    @Test
    public void testMatrixEquals8() {
        Matrix matrix = Matrix.create(new double[]{0, 1}, 1, 2);
        double[] objectToCompare = new double[]{0, 1};
        boolean expected = false;

        boolean equals = matrix.equals(objectToCompare);

        assertEquals(expected, equals);
    }

    @Test
    public void testMatrixHashCode1() {
        Matrix matrix = Matrix.create(new double[]{}, 0, 0);
        int expected = 29792;

        int hashCode = matrix.hashCode();

        assertEquals(expected, hashCode);
    }

    @Test
    public void testMatrixHashCode2() {
        Matrix matrix = Matrix.create(new double[]{}, 0, 0);
        int expected = 29792;

        int hashCode = matrix.hashCode();

        assertEquals(expected, hashCode);
    }

    @Test
    public void testMatrixHashCode3() {
        Matrix matrix = Matrix.create(new double[]{0, 1}, 1, 2);
        int expected = 1072725023;

        int hashCode = matrix.hashCode();

        assertEquals(expected, hashCode);
    }

    @Test
    public void testMatrixHashCode4() {
        Matrix matrix = Matrix.create(new double[]{0, 1}, 2, 1);
        int expected = 1072725953;

        int hashCode = matrix.hashCode();

        assertEquals(expected, hashCode);
    }

    @Test
    public void testMatrixToString1() {
        Matrix matrix = Matrix.create(new double[]{}, 0, 0);
        String expected = "Matrix{}";

        String string = matrix.toString();

        assertEquals(expected, string);
    }

    @Test
    public void testMatrixToString2() {
        Matrix matrix = Matrix.create(new double[]{0}, 1, 1);
        String expected = "Matrix{0.0000e+00}";

        String string = matrix.toString();

        assertEquals(expected, string);
    }

    @Test
    public void testMatrixToString3() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4}, 2, 2);
        String expected = "Matrix{1.0000e+00 2.0000e+00\n       3.0000e+00 4.0000e+00}";

        String string = matrix.toString();

        assertEquals(expected, string);
    }

    @Test
    public void testMatrixToStringFormat() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4}, 2, 2);
        String expected = "Matrix{1.000000e+00 2.000000e+00\n       3.000000e+00 4.000000e+00}";

        String string = matrix.toString("%.6e");

        assertEquals(expected, string);
    }

    @Test
    public void testMatrixToStringFormatDelimiters() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4}, 2, 2);
        String expected = "Matrix{1.000000e+00, 2.000000e+00; 3.000000e+00, 4.000000e+00}";

        String string = matrix.toString("%.6e", "; ", ", ");

        assertEquals(expected, string);
    }

    @Test
    public void testMatrixFactoryFromNestedArrayExceptionNull() {
        double[][] nestedArray = null;
        String expected = "'nestedArray' cannot be null";

        Exception thrown = assertThrows(NullPointerException.class, () -> Matrix.from(nestedArray));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryFromNestedArrayExceptionNestedNull0() {
        double[][] nestedArray = {null};
        String expected = "'nestedArray[0]' cannot be null";

        Exception thrown = assertThrows(NullPointerException.class, () -> Matrix.from(nestedArray));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryFromNestedArrayExceptionNestedNull1() {
        double[] array = null;
        double[][] nestedArray = {{0}, array};
        String expected = "'nestedArray[1]' cannot be null";

        Exception thrown = assertThrows(NullPointerException.class, () -> Matrix.from(nestedArray));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryFromNestedArrayExceptionInconsistentNumRows1() {
        double[][] nestedArray = {{0}, {}};
        String expected = "Inconsistent number of rows for 'nestedArray'";

        Exception thrown = assertThrows(IllegalArgumentException.class, () -> Matrix.from(nestedArray));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryFromNestedArrayExceptionInconsistentNumRows2() {
        double[][] nestedArray = {{0}, {1, 2}};
        String expected = "Inconsistent number of rows for 'nestedArray'";

        Exception thrown = assertThrows(IllegalArgumentException.class, () -> Matrix.from(nestedArray));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryFromNestedArrayExceptionInconsistentNumRows3() {
        double[][] nestedArray = {{}, {0}};
        String expected = "Inconsistent number of rows for 'nestedArray'";

        Exception thrown = assertThrows(IllegalArgumentException.class, () -> Matrix.from(nestedArray));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryFromNestedArrayExceptionInconsistentNumRows4() {
        double[][] nestedArray = {{1, 2}, {0}};
        String expected = "Inconsistent number of rows for 'nestedArray'";

        Exception thrown = assertThrows(IllegalArgumentException.class, () -> Matrix.from(nestedArray));

        assertEquals(expected, thrown.getMessage());
    }

    @Test
    public void testMatrixFactoryFromNestedArrayEmpty() {
        double[][] array = new double[][]{{}};
        double[] expected = new double[]{};

        Matrix matrix = Matrix.from(array);

        assertArrayEquals(expected, matrix.getArray(), 0.0);
    }

    @Test
    public void testMatrixFactoryFromNestedArraySimple1() {
        double[][] array = new double[][]{{1, 2}, {3, 4}};
        Matrix expected = Matrix.create(new double[]{1, 2, 3, 4}, 2, 2);

        Matrix matrix = Matrix.from(array);

        assertEquals(expected, matrix);
    }

    @Test
    public void testMatrixFactoryFromNestedArraySimple2() {
        double[][] array = new double[][]{{1, 3}, {2, 4}};
        Matrix expected = Matrix.create(new double[]{1, 3, 2, 4}, 2, 2);

        Matrix matrix = Matrix.from(array);

        assertEquals(expected, matrix);
    }

    @Test
    public void testMatrixFactoryFromNestedArraySimple3() {
        double[][] array = new double[][]{{1, 2, 3}, {4, 5, 6}};
        Matrix expected = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 2, 3);

        Matrix matrix = Matrix.from(array);

        assertEquals(expected, matrix);
    }

    @Test
    public void testMatrixFactoryFromNestedArraySimple4() {
        double[][] array = new double[][]{{1, 2}, {3, 4}, {5, 6}};
        Matrix expected = Matrix.create(new double[]{1, 2, 3, 4, 5, 6}, 3, 2);

        Matrix matrix = Matrix.from(array);

        assertEquals(expected, matrix);
    }

    @Test
    public void testMatrixCopy() {
        Matrix matrix = Matrix.create(new double[]{}, 0 ,0);

        Matrix copiedMatrix = matrix.copy();

        assertEquals(matrix, copiedMatrix);
        assertNotSame(matrix, copiedMatrix);
    }

    @Test
    public void testMatrixGet1() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4}, 2 ,2);
        int i = 0;
        int j = 0;
        double expected = 1;

        double element = matrix.get(i, j);

        assertEquals(expected, element, 0.0);
    }

    @Test
    public void testMatrixGet2() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4}, 2 ,2);
        int i = 1;
        int j = 1;
        double expected = 4;

        double element = matrix.get(i, j);

        assertEquals(expected, element, 0.0);
    }

    @Test
    public void testMatrixSet1() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4}, 2 ,2);
        int i = 0;
        int j = 0;
        double element = 4;
        double expected = 4;

        matrix.set(i, j, element);
        double elementSet = matrix.get(i, j);

        assertEquals(expected, elementSet, 0.0);
    }

    @Test
    public void testMatrixSet2() {
        Matrix matrix = Matrix.create(new double[]{1, 2, 3, 4}, 2 ,2);
        int i = 1;
        int j = 1;
        double element = 1;
        double expected = 1;

        matrix.set(i, j, element);
        double elementSet = matrix.get(i, j);

        assertEquals(expected, elementSet, 0.0);
    }

}

